#define PLATFORM_HISI
#ifndef PLATFORM_HISI
#include "ncnn_proxy.h"
#include <iostream>
// #include "crowd_detection_model_opt.bin.h"
#include "crowd_detection_model_opt.param.h"

const unsigned char* get_crowd_detection_model_opt_param_bin();
const unsigned char* get_crowd_detection_model_opt_bin();

class YoloV5Focus : public ncnn::Layer {
 public:
  YoloV5Focus() {
    one_blob_only = true;
  }

  virtual int forward(
      const ncnn::Mat& bottom_blob,
      ncnn::Mat& top_blob,
      const ncnn::Option& opt) const {
    int w = bottom_blob.w;
    int h = bottom_blob.h;
    int channels = bottom_blob.c;

    int outw = w / 2;
    int outh = h / 2;
    int outc = channels * 4;

    top_blob.create(outw, outh, outc, 4u, 1, opt.blob_allocator);
    if (top_blob.empty())
      return -100;

#pragma omp parallel for num_threads(opt.num_threads)
    for (int p = 0; p < outc; p++) {
      const float* ptr =
          bottom_blob.channel(p % channels).row((p / channels) % 2) +
          ((p / channels) / 2);
      float* outptr = top_blob.channel(p);

      for (int i = 0; i < outh; i++) {
        for (int j = 0; j < outw; j++) {
          *outptr = *ptr;

          outptr += 1;
          ptr += 2;
        }

        ptr += w;
      }
    }
    return 0;
  }
};

DEFINE_LAYER_CREATOR(YoloV5Focus)

int convertNCNNMat2CVMat(ncnn::Mat& in, Tensor& out) {
  std::cout << "convertNCNNMat2CVMat c_h_w : " << in.c << " , " << in.h << " , "
            << in.w << std::endl;

  out.w = in.w;
  out.h = in.h;
  out.c = in.c;

  out.data = new float[out.c * out.h * out.w];

  for (int i = 0; i < in.c; i++) {
    const ncnn::Mat feat = in.channel(i);

    memcpy(out.data + i * in.w * in.h, feat.row(0), feat.w * feat.h * sizeof(float));
    // out.data = (float*)in.data;

    // std::cout << "convertNCNNMat2CVMat : " << feat.w << " , " << feat.h << " , "
    //           << feat[0] << " = " << feat[feat.w * feat.h] << " , "
    //           << feat[feat.w * feat.h + 1] << std::endl;
  }

  // std::cout << "convertNCNNMat2CVMat out : " << out.data[0] << " , "
  //           << out.data[out.h * out.w] << " , " << out.data[2 * out.h * out.w]
  //           << std::endl;

  return 0;
};

NCNNProxy::NCNNProxy(){

};

NCNNProxy::~NCNNProxy(){

};

int NCNNProxy::loadModel(const char* model_path) {
  this->ncnnImpl.register_custom_layer(
      "YoloV5Focus", YoloV5Focus_layer_creator);

  // this->ncnnImpl.load_param(model_path);
  // this->ncnnImpl.load_model(model_path);

  this->ncnnImpl.load_param(get_crowd_detection_model_opt_param_bin());
  this->ncnnImpl.load_model(get_crowd_detection_model_opt_bin());

  return 0;
};

/**
 * TODO 正常不应该这个出现模型中的id,应该由外部传入
 */
int NCNNProxy::inference(cv::Mat& input) {
  // TODO 1.转换成ncnn::Mat
  ncnn::Mat n_mat = ncnn::Mat::from_pixels(
      input.data, ncnn::Mat::PIXEL_BGR2RGB, input.cols, input.rows);

  // TODO 改成参数配置生效
  const float norm_vals[3] = {1 / 255.f, 1 / 255.f, 1 / 255.f};
  n_mat.substract_mean_normalize(0, norm_vals);

  ncnn::Extractor ex = this->ncnnImpl.create_extractor();
  ex.input(crowd_detection_model_opt_param_id::BLOB_images, n_mat);

  ncnn::Mat out1;
  ex.extract(crowd_detection_model_opt_param_id::BLOB_output, out1);
  // TODO 1. 转换opencv::Mat 2. 放入outputResult[]
  Tensor t_mat1;
  convertNCNNMat2CVMat(out1, t_mat1);
  this->output_results_[0] = t_mat1;

  // --------------------------

  ncnn::Mat out2;
  ex.extract(crowd_detection_model_opt_param_id::BLOB_417, out2);

  Tensor t_mat2;
  convertNCNNMat2CVMat(out2, t_mat2);
  this->output_results_[1] = t_mat2;

  // --------------------------

  ncnn::Mat out3;
  ex.extract(crowd_detection_model_opt_param_id::BLOB_437, out3);

  Tensor t_mat3;
  convertNCNNMat2CVMat(out3, t_mat3);
  this->output_results_[2] = t_mat3;

  ex.clear();
  return 0;
};

int NCNNProxy::release() {
  this->ncnnImpl.clear();
  return 0;
}
#endif